Ruby： Webアプリケーションのシステムを作るための言語。PHPやPythonが似ている

puts ""
コメントアウト　#

計算式　数式記号の前後は半角スペースを入れましょう

変数： 値を入れておく箱のようなもの
変数を使用するのは、変数を定義したあと

なぜ変数を使うのか？
　・同じ要素を繰り返し使える
　・変更に対応しやすい
　・何の要素かわかりやすい

変数には、何の値が代入されているか分かりやすい変数名をつけましょう

省略した書き方
　X = X + 10 => X += 10
　X = X - 10 => X -= 10
　X = X * 10 => X *= 10
　X = X / 10 => X /= 10
　X = X % 10 => X %= 10

変数展開　#{変数名}
 ""で囲った変数しか展開されない

かつ　&&
　「10より大きい かつ 30より小さい」というのは「10 < x < 30」と数学のように書くことはできない。
　　x > 10 && x < 30　と&&を使って書く

または　||

配列　中身を要素と呼ぶ
インデックス番号が割り振られている

それぞれの変数の使用できる範囲のことをスコープと呼ぶ

値をまとめて管理する方法は、配列[]の他に
ハッシュ　がある
ハッシュ{}は名前をつけて管理する感じ

数値は""で囲まないゾ

ハッシュの要素を更新できる
　ハッシュ[キー] = 値
ハッシュに要素の追加
　ハッシュ[新しいキー] = 値
　※すでにあるキーにすると更新になってしまうので注意
キーは文字列、もしくは「：キー」の形で書く
　：～の書き方をシンボルという

シンボルの書き方の場合、省略した書き方ができる
　{:name => "Suzuki", :age => 21}
　{name: "Suzuki", age: 21}　　　　上と同様の意味のハッシュ。この書き方が一般的
省略した書き方でも、あくまでキーはシンボルの書き方のため、
要素を取得するときは、シンボルでの呼び出しをする

「何もない」＝ nil（ニル）

Rubyでは、nilとfalse以外＝true という扱いである

要素がハッシュである配列　などもある
配列[インデックス番号][キー]　で要素がハッシュである配列の、ハッシュの中身を取得できる

メソッドの作り方　メソッドを定義する
def メソッド名
  処理
end
メソッドを呼び出す
メソッド名

引数（ひきすう）
　メソッドに与える追加情報のようなもの
　メソッドを呼び出すときに一緒に引数を渡すことで、メソッドの中でその値を利用できる

引数を渡せるメソッドを定義する
　def メソッド名(引数名)
    処理
  end

呼び出す
　メソッド名(値)
引数はメソッド内では変数のように使用することができる

引数のあるメソッドは、引数を渡さずに呼び出すことはできない

メソッドを定義するときに用意した引数は、そのメソッドの中でしか使用できない

引数は複数受け取ることもできる
　（第1引数, 第2引数, …）

呼び出し元で受け取る処理結果のことを戻り値と呼ぶ
メソッドの中でreturnを使うと、呼び出し元で値を受け取れるようになる
def メソッド名
  return 値
end

戻り値がある場合、メソッドの呼び出し部分がそのまま戻り値に置き換わる

真偽値を返すメソッドは、メソッド名の末尾に「？」を付ける習慣がある

returnは、メソッドの処理を終了させる性質を持つ
そのためreturnの後になるメソッドの処理は実行されないため注意

キーワード引数（特殊な書き方）
　引数が多くなると、呼び出し側で、値がどの引数に入るのかがわかりにくくなる
　キーワード引数を用いた書き方をすると、呼び出し側で引数を明記することができる
メソッドの引数もキーワード引数、呼び出しの記載もキーワード引数

設計図＝クラス
もの＝インスタンス

＜クラスを用意＞
1．クラスを作成
class クラス名(大文字で始める)
end

2．クラスの中のデータを定義
attr_accessor シンボル
　クラスのデータを定義する方法の1つ
シンボル　:name　　＝インスタンス変数


＜クラスからインスタンスを生成＞
3．実際の値（インスタンス）を生成する
変数名 = クラス名.new





